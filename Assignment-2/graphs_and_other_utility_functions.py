# -*- coding: utf-8 -*-
"""Graphs_And_Other_Utility_Functions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rH-rtNEPHACOQvNH81OmPmYF26mD2ftT
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import torch
import os
import numpy as np

def plot(train_losses,train_acc,test_losses,test_acc, label):
  fig, axs = plt.subplots(1,2,figsize=(20,8))
  axs[0].plot(test_losses, label=label)
  axs[0].set_title("Test Loss")
  axs[1].plot(test_acc, label=label)
  axs[1].set_title("Test Accuracy")
  
def plotLRFinder(train_acc,lr,size,epochs):
  xrangee=len(lr)
  acc=[]
  for i in range(0,epochs):
      acc.append(max(train_acc[i*size:i*size+size]))
  #plt.xticks(np.arange(0, xrangee, step=1))
  plt.plot(lr,acc)
  #plt.yticks(np.arange(0, 100, step=10))
  plt.show()

def plotall():
  fig, axs = plt.subplots(1,2,figsize=(20,8))
  axs[0].plot(test_losses_without_L1_L2, label='without L1 and L2')
  axs[0].plot(test_losses_L1, label='with L1 only')
  axs[0].plot(test_losses_L2, label='with L2 only')
  axs[0].plot(test_losses_L1_L2, label='with L1 and L2 both')
  axs[0].set_title("Test Loss")
  axs[0].legend()
  axs[1].plot(test_acc_without_L1_L2, label='without L1 and L2')
  axs[1].plot(test_acc_L1, label='with L1 only')
  axs[1].plot(test_acc_L2, label='with L2 only')
  axs[1].plot(test_acc_L1_L2, label='with L1 and L2 both')
  axs[1].set_title("Test Accuracy")
  axs[1].legend()
  # plt.savefig('/content/gdrive/My Drive/plot.png')

def plot_misclassified_images(missclassified,filename):
  mis_Class_list=list(missclassified.values())
  # each_Item=missclassified.keys()
  # print("type= ",(mis_Class_list[1][2]))
  print("classified= ",mis_Class_list[0][2].shape)
  print("classified1= ",mis_Class_list[0][2].reshape(28,28,1).shape)
  fig = plt.figure(figsize=(10, 10))  # width, height in inches
  columns = 5
  rows = 5
  for i in range(columns*rows):
      sub = fig.add_subplot(rows, columns, i+1)
      each_img=mis_Class_list[i][2]
      shape_change=each_img.reshape(28,28)
      # print("new shape= ",shape_change.shape)
      # sub.imshow(plt.imshow(shape_change,cmap='gray',interpolation='none'))
      plt.imshow(shape_change,cmap='gray',interpolation='none')
      sub.set_title("Pred={}, Act={}".format(mis_Class_list[i][0].tolist()[0],mis_Class_list[i][1].tolist()[0]))
  plt.tight_layout()
  plt.savefig(filename)
  plt.show()
  
def plot_misclassified_gradcam_images(missclassified, missclassified_gan, classes, filename):
  mis_Class_list=list(missclassified.values())
  fig = plt.figure(figsize=(10, 10))  # width, height in inches
  columns = 5
  rows = 5
  for i in range(columns*rows):
      sub = fig.add_subplot(rows, columns, i+1)
      each_img=mpimg.imread(missclassified_gan[i])
      plt.imshow(each_img,interpolation='none')
      sub.set_title("Pred={}, Act={}".format(classes[mis_Class_list[i][0].tolist()[0]],classes[mis_Class_list[i][1].tolist()[0]]))
  plt.tight_layout()
  plt.savefig(os.path.join('/content/gdrive/My Drive',filename))
  plt.show()

def save_model(model, path):
  torch.save({'model_state_dict': model.state_dict()}, path)

def get_lr(optimizer):
    for param_group in optimizer.param_groups:
        return param_group['lr']