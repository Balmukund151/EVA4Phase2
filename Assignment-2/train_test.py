# -*- coding: utf-8 -*-
"""Train_Test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13DpP7-EnaME1w1rBM5dxHAD-SGZl0oMH
"""

from tqdm import tqdm
import torch.nn.functional as F
import torch
import torch.nn as nn

def train(model, device, train_loader, optimizer, scheduler, epoch, isL1, train_acc, train_losses, best_loss,isLRFinder):
  model.train()
  pbar = tqdm(train_loader)
  correct = 0
  processed = 0
  running_loss = 0.0
  criterion = nn.CrossEntropyLoss()
  
  for batch_idx, (data, target) in enumerate(pbar):
    # get samples
    data, target = data.to(device), target.to(device)
    optimizer.zero_grad()
    y_pred = model(data)
    # Calculate loss
    loss = criterion(y_pred, target)
    #F.nll_loss(y_pred, target)
    if isL1:
      loss += compute_L1_Loss(model,data,factor=0.0005)
    train_losses.append(loss)
    
    running_loss += loss.item()
    #update_lr(optimizer,)
    # Backpropagation
    loss.backward()
    optimizer.step()
    if not isLRFinder:
      scheduler.step()
    # Update pbar-tqdm
    
    pred = y_pred.argmax(dim=1, keepdim=True)  # get the index of the max log-probability
    correct += pred.eq(target.view_as(pred)).sum().item()
    processed += len(data)

    #pbar.set_description(desc= f'Loss={loss.item()} Batch_id={batch_idx} Accuracy={100*correct/processed:0.2f} running_loss={running_loss} threshold={best_loss*(0.996)}')
    train_acc.append(100*correct/processed)
    pbar.set_description(desc= f'Loss={loss.item()} Batch_id={batch_idx} le={get_lr(optimizer)} Accuracy={100*correct/processed:0.2f}')
  
  
  return best_loss

def test(model, device, test_loader, test_acc, test_losses, misclassified_list):
    model.eval()
    test_loss = 0
    correct = 0
    criterion = nn.CrossEntropyLoss()
    with torch.no_grad():
        for data, target in test_loader:
            i=len(misclassified_list)
            orig_data=data.numpy()
            data, target = data.to(device), target.to(device)
            output = model(data)
            test_loss += criterion(output, target).item()  # sum up batch loss
            pred = output.argmax(dim=1, keepdim=True)  # get the index of the max log-probability
            new_target=target.view_as(pred)
            for x,y,z in zip(pred,new_target,orig_data):
              if x!=y:
                # print("type= {} {} ".format(x,y))
                # print("Z", z.shape)
                misclassified_list[i]=[x,y,z]
                i +=1
            correct += pred.eq(target.view_as(pred)).sum().item()

    test_loss /= len(test_loader.dataset)
    test_losses.append(test_loss)

    print('\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)\n'.format(
        test_loss, correct, len(test_loader.dataset),
        100. * correct / len(test_loader.dataset)))
    
    test_acc.append(100. * correct / len(test_loader.dataset))

def compute_L1_Loss(model, data, factor=0.0005):
  l1_crit = nn.L1Loss().to(device)
  reg_loss = 0
  for param in model.parameters():
    zero_vector = torch.rand_like(param) * 0
    reg_loss += l1_crit(param, zero_vector)
  return factor * reg_loss
  
#def update_lr(optimizer, lr):
    #for g in optimizer.param_groups:
        #g['lr'] = lr
        
def get_lr(optimizer):
    for param_group in optimizer.param_groups:
        return param_group['lr']